/**
 * This file was **not** generated automatically. Historically it served as a template for the code generator.
 *
 * Notable differences from actual generated files are in comments below.
 *
 * @author jdiaz5513
 */

/* tslint:disable:no-use-before-declare max-classes-per-file */

// Note that this is a relative import; in an autogenerated file this would be `import * as capnp from 'capnp-ts';`.
import * as capnp from '../../lib';
// ObjectSize must be brought into this file's scope, otherwise its type would not be usable. Struct is also brought in
// to keep the generate file size down (it's referenced a LOT!).
import { ObjectSize as __O, Struct as __S } from '../../lib';

export const _id = 'b597bf4897e54f89';

export class AddressBook extends __S {

  static _capnp = { displayName: 'AddressBook', id: '', size: new __O(0, 1) };
  static People: capnp.ListCtor<Person>;

  adoptPeople(value: capnp.Orphan<capnp.List<Person>>): void {

    // There is no extra overhead to proxy through to the Pointer static methods via Struct like this since the original
    // function reference is copied as a static property.
    __S.adopt(value, this._getPointer(0));

  }

  disownPeople(): capnp.Orphan<capnp.List<Person>> {

    return __S.disown(this.getPeople());

  }

  getPeople(): capnp.List<Person> {

    return this._getList(0, AddressBook.People);

  }

  hasPeople(): boolean {

    return !__S.isNull(this._getPointer(0));

  }

  initPeople(length: number): capnp.List<Person> {

    return this._initList(0, AddressBook.People, length);

  }

  setPeople(value: capnp.List<Person>): void {

    __S.copyFrom(value, this._getPointer(0));

  }

  toString() {

    return `AddressBook_${super.toString()}`;

  }

}

declare namespace Person_PhoneNumber_Type {

  export const _displayName = 'Type';
  export const _id = '98bef1051277b9df';

}

enum Person_PhoneNumber_Type {
  MOBILE = 0,
  HOME = 1,
  WORK = 2,
}

class Person_Employment extends __S {

  static readonly _capnp = { displayName: 'Employment', id: '927f49708287c3b6', size: new __O(8, 4) };
  static UNEMPLOYED = 0;
  static EMPLOYER = 1;
  static SCHOOL = 2;
  static SELF_EMPLOYED = 3;

  _initGroup = () => {

    this._setUint16(4, 0);

  }

  getEmployer(): string {

    this._testWhich('employment', this.which(), 1);

    return this._getText(3);

  }

  getSchool(): string {

    this._testWhich('employment', this.which(), 2);

    return this._getText(3);

  }

  isEmployer(): boolean {

    return this.which() === 1;

  }

  isSchool(): boolean {

    return this.which() === 2;

  }

  isSelfEmployed(): boolean {

    return this.which() === 3;

  }

  isUnemployed(): boolean {

    return this.which() === 0;

  }

  hasEmployer(): boolean {

    this._testWhich('employment', this.which(), 1);

    return !__S.isNull(this._getPointer(3));

  }

  hasSchool(): boolean {

    this._testWhich('employment', this.which(), 2);

    return !__S.isNull(this._getPointer(3));

  }

  setEmployer(value: string): void {

    this._setUint16(4, 1);
    this._setText(3, value);

  }

  setSchool(value: string): void {

    this._setUint16(4, 2);
    this._setText(3, value);

  }

  setSelfEmployed(): void {

    this._setUint16(4, 3);

  }

  setUnemployed(): void {

    this._setUint16(4, 0);

  }

  toString(): string {

    return `Person_Employment_${super.toString()}`;

  }

  which(): number {

    return this._getUint16(4);

  }

}

class Person_PhoneNumber extends __S {

  static readonly _capnp = { displayName: 'PhoneNumber', id: 'cba8ed6b45001ccc', size: new __O(2, 1) };
  static readonly Type = Person_PhoneNumber_Type;

  getNumber(): string {

    return this._getText(0);

  }

  getType(): Person_PhoneNumber_Type {

    return this._getUint16(0);

  }

  setNumber(value: string): void {

    this._setText(0, value);

  }

  setType(value: Person_PhoneNumber_Type): void {

    this._setUint16(0, value);

  }

  toString(): string {

    return `Person_PhoneNumber_${super.toString()}`;

  }

}

export class Person extends __S {

  static readonly _capnp = { displayName: 'Person', id: 'efbbc4e996f07104', size: new __O(8, 4) };
  static readonly Employment = Person_Employment;
  static readonly PhoneNumber = Person_PhoneNumber;
  static Phones: capnp.ListCtor<Person_PhoneNumber>;

  adoptPhones(value: capnp.Orphan<capnp.List<Person_PhoneNumber>>): void {

    __S.adopt(value, this._getPointer(2));

  }

  disownPhones(): capnp.Orphan<capnp.List<Person_PhoneNumber>> {

    return __S.disown(this.getPhones());

  }

  getEmail(): string {

    return this._getText(1);

  }

  getEmployment(): Person_Employment {

    return this._getAs(Person_Employment);

  }

  getId(): number {

    return this._getUint32(0);

  }

  getName(): string {

    return this._getText(0);

  }

  getPhones(): capnp.List<Person_PhoneNumber> {

    return this._getList(2, Person.Phones);

  }

  hasEmail(): boolean {

    return !__S.isNull(this._getPointer(1));

  }

  hasName(): boolean {

    return !__S.isNull(this._getPointer(0));

  }

  hasPhones(): boolean {

    return !__S.isNull(this._getPointer(2));

  }

  initEmployment(): Person_Employment {

    const e = this.getEmployment();
    e._initGroup();
    return e;

  }

  initPhones(length: number): capnp.List<Person_PhoneNumber> {

    return this._initList(2, Person.Phones, length);

  }

  setEmail(value: string): void {

    this._setText(1, value);

  }

  setId(value: number): void {

    this._setUint32(0, value);

  }

  setName(value: string): void {

    this._setText(0, value);

  }

  setPhones(value: capnp.List<Person_PhoneNumber>): void {

    __S.copyFrom(value, this._getPointer(2));

  }

  toString(): string {

    return `Person_${super.toString()}`;

  }

}

AddressBook.People = capnp.CompositeList(Person);
Person.Phones = capnp.CompositeList(Person_PhoneNumber);
