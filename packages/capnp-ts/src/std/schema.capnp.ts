/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

/* tslint:disable */

import * as capnp from "../index";
export const _id = "a93fc509624c72d9";
export class Node_Parameter extends capnp.Struct {
    static readonly _displayName = "Parameter";
    static readonly _id = "b9521bccf10fa3b1";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(0, 1);
    getName(): string { return this._getText(0); }
    setName(value: string): void { this._setText(0, value); }
    toString(): string { return "Node_Parameter_" + super.toString(); }
}
export class Node_NestedNode extends capnp.Struct {
    static readonly _displayName = "NestedNode";
    static readonly _id = "debf55bbfa0fc242";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(8, 1);
    getName(): string { return this._getText(0); }
    setName(value: string): void { this._setText(0, value); }
    getId(): capnp.Uint64 { return this._getUint64(0); }
    setId(value: capnp.Uint64): void { this._setUint64(0, value); }
    toString(): string { return "Node_NestedNode_" + super.toString(); }
}
export class Node_Annotation extends capnp.Struct {
    static readonly _displayName = "annotation";
    static readonly _id = "ec1619d4400a0290";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(40, 6);
    adoptType(value: capnp.Orphan<Type>): void { this._getPointer(3).adopt(value); }
    disownType(): capnp.Orphan<Type> { return this.getType().disown(); }
    getType(): Type { return this._getStruct(3, Type); }
    hasType(): boolean { return !this._getPointer(3)._isNull(); }
    initType(): Type { return this._initStructAt(3, Type); }
    setType(value: Type): void { this._getPointer(3)._copyFrom(value); }
    getTargetsFile(): boolean { return this._getBit(112); }
    setTargetsFile(value: boolean): void { this._setBit(112, value); }
    getTargetsConst(): boolean { return this._getBit(113); }
    setTargetsConst(value: boolean): void { this._setBit(113, value); }
    getTargetsEnum(): boolean { return this._getBit(114); }
    setTargetsEnum(value: boolean): void { this._setBit(114, value); }
    getTargetsEnumerant(): boolean { return this._getBit(115); }
    setTargetsEnumerant(value: boolean): void { this._setBit(115, value); }
    getTargetsStruct(): boolean { return this._getBit(116); }
    setTargetsStruct(value: boolean): void { this._setBit(116, value); }
    getTargetsField(): boolean { return this._getBit(117); }
    setTargetsField(value: boolean): void { this._setBit(117, value); }
    getTargetsUnion(): boolean { return this._getBit(118); }
    setTargetsUnion(value: boolean): void { this._setBit(118, value); }
    getTargetsGroup(): boolean { return this._getBit(119); }
    setTargetsGroup(value: boolean): void { this._setBit(119, value); }
    getTargetsInterface(): boolean { return this._getBit(120); }
    setTargetsInterface(value: boolean): void { this._setBit(120, value); }
    getTargetsMethod(): boolean { return this._getBit(121); }
    setTargetsMethod(value: boolean): void { this._setBit(121, value); }
    getTargetsParam(): boolean { return this._getBit(122); }
    setTargetsParam(value: boolean): void { this._setBit(122, value); }
    getTargetsAnnotation(): boolean { return this._getBit(123); }
    setTargetsAnnotation(value: boolean): void { this._setBit(123, value); }
    toString(): string { return "Node_Annotation_" + super.toString(); }
}
export class Node_Struct extends capnp.Struct {
    static readonly _displayName = "struct";
    static readonly _id = "9ea0b19b37fb4435";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(40, 6);
    static _Fields: capnp.ListCtor<Field>;
    getDataWordCount(): number { return this._getUint16(14); }
    setDataWordCount(value: number): void { this._setUint16(14, value); }
    getPointerCount(): number { return this._getUint16(24); }
    setPointerCount(value: number): void { this._setUint16(24, value); }
    getPreferredListEncoding(): ElementSize { return this._getUint16(26); }
    setPreferredListEncoding(value: ElementSize): void { this._setUint16(26, value); }
    getIsGroup(): boolean { return this._getBit(224); }
    setIsGroup(value: boolean): void { this._setBit(224, value); }
    getDiscriminantCount(): number { return this._getUint16(30); }
    setDiscriminantCount(value: number): void { this._setUint16(30, value); }
    getDiscriminantOffset(): number { return this._getUint32(32); }
    setDiscriminantOffset(value: number): void { this._setUint32(32, value); }
    adoptFields(value: capnp.Orphan<capnp.List<Field>>): void { this._getPointer(3).adopt(value); }
    disownFields(): capnp.Orphan<capnp.List<Field>> { return this.getFields().disown(); }
    getFields(): capnp.List<Field> { return this._getList(3, Node_Struct._Fields); }
    hasFields(): boolean { return !this._getPointer(3)._isNull(); }
    initFields(length: number): capnp.List<Field> { return this._initList(3, Node_Struct._Fields, length); }
    setFields(value: capnp.List<Field>): void { this._getPointer(3)._copyFrom(value); }
    toString(): string { return "Node_Struct_" + super.toString(); }
}
export class Node_Const extends capnp.Struct {
    static readonly _displayName = "const";
    static readonly _id = "b18aa5ac7a0d9420";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(40, 6);
    adoptType(value: capnp.Orphan<Type>): void { this._getPointer(3).adopt(value); }
    disownType(): capnp.Orphan<Type> { return this.getType().disown(); }
    getType(): Type { return this._getStruct(3, Type); }
    hasType(): boolean { return !this._getPointer(3)._isNull(); }
    initType(): Type { return this._initStructAt(3, Type); }
    setType(value: Type): void { this._getPointer(3)._copyFrom(value); }
    adoptValue(value: capnp.Orphan<Value>): void { this._getPointer(4).adopt(value); }
    disownValue(): capnp.Orphan<Value> { return this.getValue().disown(); }
    getValue(): Value { return this._getStruct(4, Value); }
    hasValue(): boolean { return !this._getPointer(4)._isNull(); }
    initValue(): Value { return this._initStructAt(4, Value); }
    setValue(value: Value): void { this._getPointer(4)._copyFrom(value); }
    toString(): string { return "Node_Const_" + super.toString(); }
}
export class Node_Interface extends capnp.Struct {
    static readonly _displayName = "interface";
    static readonly _id = "e82753cff0c2218f";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(40, 6);
    static _Methods: capnp.ListCtor<Method>;
    static _Superclasses: capnp.ListCtor<Superclass>;
    adoptMethods(value: capnp.Orphan<capnp.List<Method>>): void { this._getPointer(3).adopt(value); }
    disownMethods(): capnp.Orphan<capnp.List<Method>> { return this.getMethods().disown(); }
    getMethods(): capnp.List<Method> { return this._getList(3, Node_Interface._Methods); }
    hasMethods(): boolean { return !this._getPointer(3)._isNull(); }
    initMethods(length: number): capnp.List<Method> { return this._initList(3, Node_Interface._Methods, length); }
    setMethods(value: capnp.List<Method>): void { this._getPointer(3)._copyFrom(value); }
    adoptSuperclasses(value: capnp.Orphan<capnp.List<Superclass>>): void { this._getPointer(4).adopt(value); }
    disownSuperclasses(): capnp.Orphan<capnp.List<Superclass>> { return this.getSuperclasses().disown(); }
    getSuperclasses(): capnp.List<Superclass> { return this._getList(4, Node_Interface._Superclasses); }
    hasSuperclasses(): boolean { return !this._getPointer(4)._isNull(); }
    initSuperclasses(length: number): capnp.List<Superclass> { return this._initList(4, Node_Interface._Superclasses, length); }
    setSuperclasses(value: capnp.List<Superclass>): void { this._getPointer(4)._copyFrom(value); }
    toString(): string { return "Node_Interface_" + super.toString(); }
}
export class Node_Enum extends capnp.Struct {
    static readonly _displayName = "enum";
    static readonly _id = "b54ab3364333f598";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(40, 6);
    static _Enumerants: capnp.ListCtor<Enumerant>;
    adoptEnumerants(value: capnp.Orphan<capnp.List<Enumerant>>): void { this._getPointer(3).adopt(value); }
    disownEnumerants(): capnp.Orphan<capnp.List<Enumerant>> { return this.getEnumerants().disown(); }
    getEnumerants(): capnp.List<Enumerant> { return this._getList(3, Node_Enum._Enumerants); }
    hasEnumerants(): boolean { return !this._getPointer(3)._isNull(); }
    initEnumerants(length: number): capnp.List<Enumerant> { return this._initList(3, Node_Enum._Enumerants, length); }
    setEnumerants(value: capnp.List<Enumerant>): void { this._getPointer(3)._copyFrom(value); }
    toString(): string { return "Node_Enum_" + super.toString(); }
}
export enum Node_Which {
    FILE = 0,
    STRUCT = 1,
    ENUM = 2,
    INTERFACE = 3,
    CONST = 4,
    ANNOTATION = 5
}
export class Node extends capnp.Struct {
    static readonly FILE = Node_Which.FILE;
    static readonly STRUCT = Node_Which.STRUCT;
    static readonly ENUM = Node_Which.ENUM;
    static readonly INTERFACE = Node_Which.INTERFACE;
    static readonly CONST = Node_Which.CONST;
    static readonly ANNOTATION = Node_Which.ANNOTATION;
    static readonly Parameter = Node_Parameter;
    static readonly NestedNode = Node_NestedNode;
    static readonly _displayName = "Node";
    static readonly _id = "e682ab4cf923a417";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(40, 6);
    static _Parameters: capnp.ListCtor<Node_Parameter>;
    static _NestedNodes: capnp.ListCtor<Node_NestedNode>;
    static _Annotations: capnp.ListCtor<Annotation>;
    getId(): capnp.Uint64 { return this._getUint64(0); }
    setId(value: capnp.Uint64): void { this._setUint64(0, value); }
    getDisplayName(): string { return this._getText(0); }
    setDisplayName(value: string): void { this._setText(0, value); }
    getDisplayNamePrefixLength(): number { return this._getUint32(8); }
    setDisplayNamePrefixLength(value: number): void { this._setUint32(8, value); }
    getScopeId(): capnp.Uint64 { return this._getUint64(16); }
    setScopeId(value: capnp.Uint64): void { this._setUint64(16, value); }
    adoptParameters(value: capnp.Orphan<capnp.List<Node_Parameter>>): void { this._getPointer(5).adopt(value); }
    disownParameters(): capnp.Orphan<capnp.List<Node_Parameter>> { return this.getParameters().disown(); }
    getParameters(): capnp.List<Node_Parameter> { return this._getList(5, Node._Parameters); }
    hasParameters(): boolean { return !this._getPointer(5)._isNull(); }
    initParameters(length: number): capnp.List<Node_Parameter> { return this._initList(5, Node._Parameters, length); }
    setParameters(value: capnp.List<Node_Parameter>): void { this._getPointer(5)._copyFrom(value); }
    getIsGeneric(): boolean { return this._getBit(288); }
    setIsGeneric(value: boolean): void { this._setBit(288, value); }
    adoptNestedNodes(value: capnp.Orphan<capnp.List<Node_NestedNode>>): void { this._getPointer(1).adopt(value); }
    disownNestedNodes(): capnp.Orphan<capnp.List<Node_NestedNode>> { return this.getNestedNodes().disown(); }
    getNestedNodes(): capnp.List<Node_NestedNode> { return this._getList(1, Node._NestedNodes); }
    hasNestedNodes(): boolean { return !this._getPointer(1)._isNull(); }
    initNestedNodes(length: number): capnp.List<Node_NestedNode> { return this._initList(1, Node._NestedNodes, length); }
    setNestedNodes(value: capnp.List<Node_NestedNode>): void { this._getPointer(1)._copyFrom(value); }
    adoptAnnotations(value: capnp.Orphan<capnp.List<Annotation>>): void { this._getPointer(2).adopt(value); }
    disownAnnotations(): capnp.Orphan<capnp.List<Annotation>> { return this.getAnnotations().disown(); }
    getAnnotations(): capnp.List<Annotation> { return this._getList(2, Node._Annotations); }
    hasAnnotations(): boolean { return !this._getPointer(2)._isNull(); }
    initAnnotations(length: number): capnp.List<Annotation> { return this._initList(2, Node._Annotations, length); }
    setAnnotations(value: capnp.List<Annotation>): void { this._getPointer(2)._copyFrom(value); }
    isFile(): boolean { return this._getUint16(12) === 0; }
    getStruct(): Node_Struct {
        this._testWhich("struct", this._getUint16(12), 1);
        return this._getAs(Node_Struct);
    }
    initStruct(): Node_Struct {
        this._setUint16(12, 1);
        return this._getAs(Node_Struct);
    }
    isStruct(): boolean { return this._getUint16(12) === 1; }
    getEnum(): Node_Enum {
        this._testWhich("enum", this._getUint16(12), 2);
        return this._getAs(Node_Enum);
    }
    initEnum(): Node_Enum {
        this._setUint16(12, 2);
        return this._getAs(Node_Enum);
    }
    isEnum(): boolean { return this._getUint16(12) === 2; }
    getInterface(): Node_Interface {
        this._testWhich("interface", this._getUint16(12), 3);
        return this._getAs(Node_Interface);
    }
    initInterface(): Node_Interface {
        this._setUint16(12, 3);
        return this._getAs(Node_Interface);
    }
    isInterface(): boolean { return this._getUint16(12) === 3; }
    getConst(): Node_Const {
        this._testWhich("const", this._getUint16(12), 4);
        return this._getAs(Node_Const);
    }
    initConst(): Node_Const {
        this._setUint16(12, 4);
        return this._getAs(Node_Const);
    }
    isConst(): boolean { return this._getUint16(12) === 4; }
    getAnnotation(): Node_Annotation {
        this._testWhich("annotation", this._getUint16(12), 5);
        return this._getAs(Node_Annotation);
    }
    initAnnotation(): Node_Annotation {
        this._setUint16(12, 5);
        return this._getAs(Node_Annotation);
    }
    isAnnotation(): boolean { return this._getUint16(12) === 5; }
    toString(): string { return "Node_" + super.toString(); }
    which(): Node_Which { return this._getUint16(12); }
}
export enum Field_Ordinal_Which {
    IMPLICIT = 0,
    EXPLICIT = 1
}
export class Field_Ordinal extends capnp.Struct {
    static readonly IMPLICIT = Field_Ordinal_Which.IMPLICIT;
    static readonly EXPLICIT = Field_Ordinal_Which.EXPLICIT;
    static readonly _displayName = "ordinal";
    static readonly _id = "bb90d5c287870be6";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(24, 4);
    isImplicit(): boolean { return this._getUint16(10) === 0; }
    getExplicit(): number {
        this._testWhich("explicit", this._getUint16(10), 1);
        return this._getUint16(12);
    }
    isExplicit(): boolean { return this._getUint16(10) === 1; }
    setExplicit(value: number): void {
        this._setUint16(10, 1);
        this._setUint16(12, value);
    }
    toString(): string { return "Field_Ordinal_" + super.toString(); }
    which(): Field_Ordinal_Which { return this._getUint16(10); }
}
export class Field_Group extends capnp.Struct {
    static readonly _displayName = "group";
    static readonly _id = "cafccddb68db1d11";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(24, 4);
    getTypeId(): capnp.Uint64 { return this._getUint64(16); }
    setTypeId(value: capnp.Uint64): void { this._setUint64(16, value); }
    toString(): string { return "Field_Group_" + super.toString(); }
}
export class Field_Slot extends capnp.Struct {
    static readonly _displayName = "slot";
    static readonly _id = "c42305476bb4746f";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(24, 4);
    getOffset(): number { return this._getUint32(4); }
    setOffset(value: number): void { this._setUint32(4, value); }
    adoptType(value: capnp.Orphan<Type>): void { this._getPointer(2).adopt(value); }
    disownType(): capnp.Orphan<Type> { return this.getType().disown(); }
    getType(): Type { return this._getStruct(2, Type); }
    hasType(): boolean { return !this._getPointer(2)._isNull(); }
    initType(): Type { return this._initStructAt(2, Type); }
    setType(value: Type): void { this._getPointer(2)._copyFrom(value); }
    adoptDefaultValue(value: capnp.Orphan<Value>): void { this._getPointer(3).adopt(value); }
    disownDefaultValue(): capnp.Orphan<Value> { return this.getDefaultValue().disown(); }
    getDefaultValue(): Value { return this._getStruct(3, Value); }
    hasDefaultValue(): boolean { return !this._getPointer(3)._isNull(); }
    initDefaultValue(): Value { return this._initStructAt(3, Value); }
    setDefaultValue(value: Value): void { this._getPointer(3)._copyFrom(value); }
    getHadExplicitDefault(): boolean { return this._getBit(128); }
    setHadExplicitDefault(value: boolean): void { this._setBit(128, value); }
    toString(): string { return "Field_Slot_" + super.toString(); }
}
export enum Field_Which {
    SLOT = 0,
    GROUP = 1
}
const FIELD_DISCRIMINANT_VALUE_DEFAULT = capnp.getUint16Mask(65535);
export class Field extends capnp.Struct {
    static readonly NO_DISCRIMINANT = 65535;
    static readonly SLOT = Field_Which.SLOT;
    static readonly GROUP = Field_Which.GROUP;
    static readonly _displayName = "Field";
    static readonly _id = "9aad50a41f4af45f";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(24, 4);
    static _Annotations: capnp.ListCtor<Annotation>;
    getName(): string { return this._getText(0); }
    setName(value: string): void { this._setText(0, value); }
    getCodeOrder(): number { return this._getUint16(0); }
    setCodeOrder(value: number): void { this._setUint16(0, value); }
    adoptAnnotations(value: capnp.Orphan<capnp.List<Annotation>>): void { this._getPointer(1).adopt(value); }
    disownAnnotations(): capnp.Orphan<capnp.List<Annotation>> { return this.getAnnotations().disown(); }
    getAnnotations(): capnp.List<Annotation> { return this._getList(1, Field._Annotations); }
    hasAnnotations(): boolean { return !this._getPointer(1)._isNull(); }
    initAnnotations(length: number): capnp.List<Annotation> { return this._initList(1, Field._Annotations, length); }
    setAnnotations(value: capnp.List<Annotation>): void { this._getPointer(1)._copyFrom(value); }
    getDiscriminantValue(): number { return this._getUint16(2, FIELD_DISCRIMINANT_VALUE_DEFAULT); }
    setDiscriminantValue(value: number): void { this._setUint16(2, value); }
    getSlot(): Field_Slot {
        this._testWhich("slot", this._getUint16(8), 0);
        return this._getAs(Field_Slot);
    }
    initSlot(): Field_Slot {
        this._setUint16(8, 0);
        return this._getAs(Field_Slot);
    }
    isSlot(): boolean { return this._getUint16(8) === 0; }
    getGroup(): Field_Group {
        this._testWhich("group", this._getUint16(8), 1);
        return this._getAs(Field_Group);
    }
    initGroup(): Field_Group {
        this._setUint16(8, 1);
        return this._getAs(Field_Group);
    }
    isGroup(): boolean { return this._getUint16(8) === 1; }
    getOrdinal(): Field_Ordinal { return this._getAs(Field_Ordinal); }
    initOrdinal(): Field_Ordinal { return this._getAs(Field_Ordinal); }
    toString(): string { return "Field_" + super.toString(); }
    which(): Field_Which { return this._getUint16(8); }
}
export class Enumerant extends capnp.Struct {
    static readonly _displayName = "Enumerant";
    static readonly _id = "978a7cebdc549a4d";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(8, 2);
    static _Annotations: capnp.ListCtor<Annotation>;
    getName(): string { return this._getText(0); }
    setName(value: string): void { this._setText(0, value); }
    getCodeOrder(): number { return this._getUint16(0); }
    setCodeOrder(value: number): void { this._setUint16(0, value); }
    adoptAnnotations(value: capnp.Orphan<capnp.List<Annotation>>): void { this._getPointer(1).adopt(value); }
    disownAnnotations(): capnp.Orphan<capnp.List<Annotation>> { return this.getAnnotations().disown(); }
    getAnnotations(): capnp.List<Annotation> { return this._getList(1, Enumerant._Annotations); }
    hasAnnotations(): boolean { return !this._getPointer(1)._isNull(); }
    initAnnotations(length: number): capnp.List<Annotation> { return this._initList(1, Enumerant._Annotations, length); }
    setAnnotations(value: capnp.List<Annotation>): void { this._getPointer(1)._copyFrom(value); }
    toString(): string { return "Enumerant_" + super.toString(); }
}
export class Superclass extends capnp.Struct {
    static readonly _displayName = "Superclass";
    static readonly _id = "a9962a9ed0a4d7f8";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(8, 1);
    getId(): capnp.Uint64 { return this._getUint64(0); }
    setId(value: capnp.Uint64): void { this._setUint64(0, value); }
    adoptBrand(value: capnp.Orphan<Brand>): void { this._getPointer(0).adopt(value); }
    disownBrand(): capnp.Orphan<Brand> { return this.getBrand().disown(); }
    getBrand(): Brand { return this._getStruct(0, Brand); }
    hasBrand(): boolean { return !this._getPointer(0)._isNull(); }
    initBrand(): Brand { return this._initStructAt(0, Brand); }
    setBrand(value: Brand): void { this._getPointer(0)._copyFrom(value); }
    toString(): string { return "Superclass_" + super.toString(); }
}
export class Method extends capnp.Struct {
    static readonly _displayName = "Method";
    static readonly _id = "9500cce23b334d80";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(24, 5);
    static _ImplicitParameters: capnp.ListCtor<Node_Parameter>;
    static _Annotations: capnp.ListCtor<Annotation>;
    getName(): string { return this._getText(0); }
    setName(value: string): void { this._setText(0, value); }
    getCodeOrder(): number { return this._getUint16(0); }
    setCodeOrder(value: number): void { this._setUint16(0, value); }
    adoptImplicitParameters(value: capnp.Orphan<capnp.List<Node_Parameter>>): void { this._getPointer(4).adopt(value); }
    disownImplicitParameters(): capnp.Orphan<capnp.List<Node_Parameter>> { return this.getImplicitParameters().disown(); }
    getImplicitParameters(): capnp.List<Node_Parameter> { return this._getList(4, Method._ImplicitParameters); }
    hasImplicitParameters(): boolean { return !this._getPointer(4)._isNull(); }
    initImplicitParameters(length: number): capnp.List<Node_Parameter> { return this._initList(4, Method._ImplicitParameters, length); }
    setImplicitParameters(value: capnp.List<Node_Parameter>): void { this._getPointer(4)._copyFrom(value); }
    getParamStructType(): capnp.Uint64 { return this._getUint64(8); }
    setParamStructType(value: capnp.Uint64): void { this._setUint64(8, value); }
    adoptParamBrand(value: capnp.Orphan<Brand>): void { this._getPointer(2).adopt(value); }
    disownParamBrand(): capnp.Orphan<Brand> { return this.getParamBrand().disown(); }
    getParamBrand(): Brand { return this._getStruct(2, Brand); }
    hasParamBrand(): boolean { return !this._getPointer(2)._isNull(); }
    initParamBrand(): Brand { return this._initStructAt(2, Brand); }
    setParamBrand(value: Brand): void { this._getPointer(2)._copyFrom(value); }
    getResultStructType(): capnp.Uint64 { return this._getUint64(16); }
    setResultStructType(value: capnp.Uint64): void { this._setUint64(16, value); }
    adoptResultBrand(value: capnp.Orphan<Brand>): void { this._getPointer(3).adopt(value); }
    disownResultBrand(): capnp.Orphan<Brand> { return this.getResultBrand().disown(); }
    getResultBrand(): Brand { return this._getStruct(3, Brand); }
    hasResultBrand(): boolean { return !this._getPointer(3)._isNull(); }
    initResultBrand(): Brand { return this._initStructAt(3, Brand); }
    setResultBrand(value: Brand): void { this._getPointer(3)._copyFrom(value); }
    adoptAnnotations(value: capnp.Orphan<capnp.List<Annotation>>): void { this._getPointer(1).adopt(value); }
    disownAnnotations(): capnp.Orphan<capnp.List<Annotation>> { return this.getAnnotations().disown(); }
    getAnnotations(): capnp.List<Annotation> { return this._getList(1, Method._Annotations); }
    hasAnnotations(): boolean { return !this._getPointer(1)._isNull(); }
    initAnnotations(length: number): capnp.List<Annotation> { return this._initList(1, Method._Annotations, length); }
    setAnnotations(value: capnp.List<Annotation>): void { this._getPointer(1)._copyFrom(value); }
    toString(): string { return "Method_" + super.toString(); }
}
export class Type_Enum extends capnp.Struct {
    static readonly _displayName = "enum";
    static readonly _id = "9e0e78711a7f87a9";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(24, 1);
    getTypeId(): capnp.Uint64 { return this._getUint64(8); }
    setTypeId(value: capnp.Uint64): void { this._setUint64(8, value); }
    adoptBrand(value: capnp.Orphan<Brand>): void { this._getPointer(0).adopt(value); }
    disownBrand(): capnp.Orphan<Brand> { return this.getBrand().disown(); }
    getBrand(): Brand { return this._getStruct(0, Brand); }
    hasBrand(): boolean { return !this._getPointer(0)._isNull(); }
    initBrand(): Brand { return this._initStructAt(0, Brand); }
    setBrand(value: Brand): void { this._getPointer(0)._copyFrom(value); }
    toString(): string { return "Type_Enum_" + super.toString(); }
}
export class Type_Struct extends capnp.Struct {
    static readonly _displayName = "struct";
    static readonly _id = "ac3a6f60ef4cc6d3";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(24, 1);
    getTypeId(): capnp.Uint64 { return this._getUint64(8); }
    setTypeId(value: capnp.Uint64): void { this._setUint64(8, value); }
    adoptBrand(value: capnp.Orphan<Brand>): void { this._getPointer(0).adopt(value); }
    disownBrand(): capnp.Orphan<Brand> { return this.getBrand().disown(); }
    getBrand(): Brand { return this._getStruct(0, Brand); }
    hasBrand(): boolean { return !this._getPointer(0)._isNull(); }
    initBrand(): Brand { return this._initStructAt(0, Brand); }
    setBrand(value: Brand): void { this._getPointer(0)._copyFrom(value); }
    toString(): string { return "Type_Struct_" + super.toString(); }
}
export enum Type_AnyPointer_Unconstrained_Which {
    ANY_KIND = 0,
    STRUCT = 1,
    LIST = 2,
    CAPABILITY = 3
}
export class Type_AnyPointer_Unconstrained extends capnp.Struct {
    static readonly ANY_KIND = Type_AnyPointer_Unconstrained_Which.ANY_KIND;
    static readonly STRUCT = Type_AnyPointer_Unconstrained_Which.STRUCT;
    static readonly LIST = Type_AnyPointer_Unconstrained_Which.LIST;
    static readonly CAPABILITY = Type_AnyPointer_Unconstrained_Which.CAPABILITY;
    static readonly _displayName = "unconstrained";
    static readonly _id = "8e3b5f79fe593656";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(24, 1);
    isAnyKind(): boolean { return this._getUint16(10) === 0; }
    isStruct(): boolean { return this._getUint16(10) === 1; }
    isList(): boolean { return this._getUint16(10) === 2; }
    isCapability(): boolean { return this._getUint16(10) === 3; }
    toString(): string { return "Type_AnyPointer_Unconstrained_" + super.toString(); }
    which(): Type_AnyPointer_Unconstrained_Which { return this._getUint16(10); }
}
export class Type_AnyPointer_Parameter extends capnp.Struct {
    static readonly _displayName = "parameter";
    static readonly _id = "9dd1f724f4614a85";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(24, 1);
    getScopeId(): capnp.Uint64 { return this._getUint64(16); }
    setScopeId(value: capnp.Uint64): void { this._setUint64(16, value); }
    getParameterIndex(): number { return this._getUint16(10); }
    setParameterIndex(value: number): void { this._setUint16(10, value); }
    toString(): string { return "Type_AnyPointer_Parameter_" + super.toString(); }
}
export class Type_AnyPointer_ImplicitMethodParameter extends capnp.Struct {
    static readonly _displayName = "implicitMethodParameter";
    static readonly _id = "baefc9120c56e274";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(24, 1);
    getParameterIndex(): number { return this._getUint16(10); }
    setParameterIndex(value: number): void { this._setUint16(10, value); }
    toString(): string { return "Type_AnyPointer_ImplicitMethodParameter_" + super.toString(); }
}
export enum Type_AnyPointer_Which {
    UNCONSTRAINED = 0,
    PARAMETER = 1,
    IMPLICIT_METHOD_PARAMETER = 2
}
export class Type_AnyPointer extends capnp.Struct {
    static readonly UNCONSTRAINED = Type_AnyPointer_Which.UNCONSTRAINED;
    static readonly PARAMETER = Type_AnyPointer_Which.PARAMETER;
    static readonly IMPLICIT_METHOD_PARAMETER = Type_AnyPointer_Which.IMPLICIT_METHOD_PARAMETER;
    static readonly _displayName = "anyPointer";
    static readonly _id = "c2573fe8a23e49f1";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(24, 1);
    getUnconstrained(): Type_AnyPointer_Unconstrained {
        this._testWhich("unconstrained", this._getUint16(8), 0);
        return this._getAs(Type_AnyPointer_Unconstrained);
    }
    initUnconstrained(): Type_AnyPointer_Unconstrained {
        this._setUint16(8, 0);
        return this._getAs(Type_AnyPointer_Unconstrained);
    }
    isUnconstrained(): boolean { return this._getUint16(8) === 0; }
    getParameter(): Type_AnyPointer_Parameter {
        this._testWhich("parameter", this._getUint16(8), 1);
        return this._getAs(Type_AnyPointer_Parameter);
    }
    initParameter(): Type_AnyPointer_Parameter {
        this._setUint16(8, 1);
        return this._getAs(Type_AnyPointer_Parameter);
    }
    isParameter(): boolean { return this._getUint16(8) === 1; }
    getImplicitMethodParameter(): Type_AnyPointer_ImplicitMethodParameter {
        this._testWhich("implicitMethodParameter", this._getUint16(8), 2);
        return this._getAs(Type_AnyPointer_ImplicitMethodParameter);
    }
    initImplicitMethodParameter(): Type_AnyPointer_ImplicitMethodParameter {
        this._setUint16(8, 2);
        return this._getAs(Type_AnyPointer_ImplicitMethodParameter);
    }
    isImplicitMethodParameter(): boolean { return this._getUint16(8) === 2; }
    toString(): string { return "Type_AnyPointer_" + super.toString(); }
    which(): Type_AnyPointer_Which { return this._getUint16(8); }
}
export class Type_List extends capnp.Struct {
    static readonly _displayName = "list";
    static readonly _id = "87e739250a60ea97";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(24, 1);
    adoptElementType(value: capnp.Orphan<Type>): void { this._getPointer(0).adopt(value); }
    disownElementType(): capnp.Orphan<Type> { return this.getElementType().disown(); }
    getElementType(): Type { return this._getStruct(0, Type); }
    hasElementType(): boolean { return !this._getPointer(0)._isNull(); }
    initElementType(): Type { return this._initStructAt(0, Type); }
    setElementType(value: Type): void { this._getPointer(0)._copyFrom(value); }
    toString(): string { return "Type_List_" + super.toString(); }
}
export class Type_Interface extends capnp.Struct {
    static readonly _displayName = "interface";
    static readonly _id = "ed8bca69f7fb0cbf";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(24, 1);
    getTypeId(): capnp.Uint64 { return this._getUint64(8); }
    setTypeId(value: capnp.Uint64): void { this._setUint64(8, value); }
    adoptBrand(value: capnp.Orphan<Brand>): void { this._getPointer(0).adopt(value); }
    disownBrand(): capnp.Orphan<Brand> { return this.getBrand().disown(); }
    getBrand(): Brand { return this._getStruct(0, Brand); }
    hasBrand(): boolean { return !this._getPointer(0)._isNull(); }
    initBrand(): Brand { return this._initStructAt(0, Brand); }
    setBrand(value: Brand): void { this._getPointer(0)._copyFrom(value); }
    toString(): string { return "Type_Interface_" + super.toString(); }
}
export enum Type_Which {
    VOID = 0,
    BOOL = 1,
    INT8 = 2,
    INT16 = 3,
    INT32 = 4,
    INT64 = 5,
    UINT8 = 6,
    UINT16 = 7,
    UINT32 = 8,
    UINT64 = 9,
    FLOAT32 = 10,
    FLOAT64 = 11,
    TEXT = 12,
    DATA = 13,
    LIST = 14,
    ENUM = 15,
    STRUCT = 16,
    INTERFACE = 17,
    ANY_POINTER = 18
}
export class Type extends capnp.Struct {
    static readonly VOID = Type_Which.VOID;
    static readonly BOOL = Type_Which.BOOL;
    static readonly INT8 = Type_Which.INT8;
    static readonly INT16 = Type_Which.INT16;
    static readonly INT32 = Type_Which.INT32;
    static readonly INT64 = Type_Which.INT64;
    static readonly UINT8 = Type_Which.UINT8;
    static readonly UINT16 = Type_Which.UINT16;
    static readonly UINT32 = Type_Which.UINT32;
    static readonly UINT64 = Type_Which.UINT64;
    static readonly FLOAT32 = Type_Which.FLOAT32;
    static readonly FLOAT64 = Type_Which.FLOAT64;
    static readonly TEXT = Type_Which.TEXT;
    static readonly DATA = Type_Which.DATA;
    static readonly LIST = Type_Which.LIST;
    static readonly ENUM = Type_Which.ENUM;
    static readonly STRUCT = Type_Which.STRUCT;
    static readonly INTERFACE = Type_Which.INTERFACE;
    static readonly ANY_POINTER = Type_Which.ANY_POINTER;
    static readonly _displayName = "Type";
    static readonly _id = "d07378ede1f9cc60";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(24, 1);
    isVoid(): boolean { return this._getUint16(0) === 0; }
    isBool(): boolean { return this._getUint16(0) === 1; }
    isInt8(): boolean { return this._getUint16(0) === 2; }
    isInt16(): boolean { return this._getUint16(0) === 3; }
    isInt32(): boolean { return this._getUint16(0) === 4; }
    isInt64(): boolean { return this._getUint16(0) === 5; }
    isUint8(): boolean { return this._getUint16(0) === 6; }
    isUint16(): boolean { return this._getUint16(0) === 7; }
    isUint32(): boolean { return this._getUint16(0) === 8; }
    isUint64(): boolean { return this._getUint16(0) === 9; }
    isFloat32(): boolean { return this._getUint16(0) === 10; }
    isFloat64(): boolean { return this._getUint16(0) === 11; }
    isText(): boolean { return this._getUint16(0) === 12; }
    isData(): boolean { return this._getUint16(0) === 13; }
    getList(): Type_List {
        this._testWhich("list", this._getUint16(0), 14);
        return this._getAs(Type_List);
    }
    initList(): Type_List {
        this._setUint16(0, 14);
        return this._getAs(Type_List);
    }
    isList(): boolean { return this._getUint16(0) === 14; }
    getEnum(): Type_Enum {
        this._testWhich("enum", this._getUint16(0), 15);
        return this._getAs(Type_Enum);
    }
    initEnum(): Type_Enum {
        this._setUint16(0, 15);
        return this._getAs(Type_Enum);
    }
    isEnum(): boolean { return this._getUint16(0) === 15; }
    getStruct(): Type_Struct {
        this._testWhich("struct", this._getUint16(0), 16);
        return this._getAs(Type_Struct);
    }
    initStruct(): Type_Struct {
        this._setUint16(0, 16);
        return this._getAs(Type_Struct);
    }
    isStruct(): boolean { return this._getUint16(0) === 16; }
    getInterface(): Type_Interface {
        this._testWhich("interface", this._getUint16(0), 17);
        return this._getAs(Type_Interface);
    }
    initInterface(): Type_Interface {
        this._setUint16(0, 17);
        return this._getAs(Type_Interface);
    }
    isInterface(): boolean { return this._getUint16(0) === 17; }
    getAnyPointer(): Type_AnyPointer {
        this._testWhich("anyPointer", this._getUint16(0), 18);
        return this._getAs(Type_AnyPointer);
    }
    initAnyPointer(): Type_AnyPointer {
        this._setUint16(0, 18);
        return this._getAs(Type_AnyPointer);
    }
    isAnyPointer(): boolean { return this._getUint16(0) === 18; }
    toString(): string { return "Type_" + super.toString(); }
    which(): Type_Which { return this._getUint16(0); }
}
export enum Brand_Scope_Which {
    BIND = 0,
    INHERIT = 1
}
export class Brand_Scope extends capnp.Struct {
    static readonly BIND = Brand_Scope_Which.BIND;
    static readonly INHERIT = Brand_Scope_Which.INHERIT;
    static readonly _displayName = "Scope";
    static readonly _id = "abd73485a9636bc9";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(16, 1);
    static _Bind: capnp.ListCtor<Brand_Binding>;
    getScopeId(): capnp.Uint64 { return this._getUint64(0); }
    setScopeId(value: capnp.Uint64): void { this._setUint64(0, value); }
    adoptBind(value: capnp.Orphan<capnp.List<Brand_Binding>>): void {
        this._setUint16(8, 0);
        this._getPointer(0).adopt(value);
    }
    disownBind(): capnp.Orphan<capnp.List<Brand_Binding>> { return this.getBind().disown(); }
    getBind(): capnp.List<Brand_Binding> {
        this._testWhich("bind", this._getUint16(8), 0);
        return this._getList(0, Brand_Scope._Bind);
    }
    hasBind(): boolean { return !this._getPointer(0)._isNull(); }
    initBind(length: number): capnp.List<Brand_Binding> {
        this._setUint16(8, 0);
        return this._initList(0, Brand_Scope._Bind, length);
    }
    isBind(): boolean { return this._getUint16(8) === 0; }
    setBind(value: capnp.List<Brand_Binding>): void {
        this._setUint16(8, 0);
        this._getPointer(0)._copyFrom(value);
    }
    isInherit(): boolean { return this._getUint16(8) === 1; }
    toString(): string { return "Brand_Scope_" + super.toString(); }
    which(): Brand_Scope_Which { return this._getUint16(8); }
}
export enum Brand_Binding_Which {
    UNBOUND = 0,
    TYPE = 1
}
export class Brand_Binding extends capnp.Struct {
    static readonly UNBOUND = Brand_Binding_Which.UNBOUND;
    static readonly TYPE = Brand_Binding_Which.TYPE;
    static readonly _displayName = "Binding";
    static readonly _id = "c863cd16969ee7fc";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(8, 1);
    isUnbound(): boolean { return this._getUint16(0) === 0; }
    adoptType(value: capnp.Orphan<Type>): void {
        this._setUint16(0, 1);
        this._getPointer(0).adopt(value);
    }
    disownType(): capnp.Orphan<Type> { return this.getType().disown(); }
    getType(): Type {
        this._testWhich("type", this._getUint16(0), 1);
        return this._getStruct(0, Type);
    }
    hasType(): boolean { return !this._getPointer(0)._isNull(); }
    initType(): Type {
        this._setUint16(0, 1);
        return this._initStructAt(0, Type);
    }
    isType(): boolean { return this._getUint16(0) === 1; }
    setType(value: Type): void {
        this._setUint16(0, 1);
        this._getPointer(0)._copyFrom(value);
    }
    toString(): string { return "Brand_Binding_" + super.toString(); }
    which(): Brand_Binding_Which { return this._getUint16(0); }
}
export class Brand extends capnp.Struct {
    static readonly Scope = Brand_Scope;
    static readonly Binding = Brand_Binding;
    static readonly _displayName = "Brand";
    static readonly _id = "903455f06065422b";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(0, 1);
    static _Scopes: capnp.ListCtor<Brand_Scope>;
    adoptScopes(value: capnp.Orphan<capnp.List<Brand_Scope>>): void { this._getPointer(0).adopt(value); }
    disownScopes(): capnp.Orphan<capnp.List<Brand_Scope>> { return this.getScopes().disown(); }
    getScopes(): capnp.List<Brand_Scope> { return this._getList(0, Brand._Scopes); }
    hasScopes(): boolean { return !this._getPointer(0)._isNull(); }
    initScopes(length: number): capnp.List<Brand_Scope> { return this._initList(0, Brand._Scopes, length); }
    setScopes(value: capnp.List<Brand_Scope>): void { this._getPointer(0)._copyFrom(value); }
    toString(): string { return "Brand_" + super.toString(); }
}
export enum Value_Which {
    VOID = 0,
    BOOL = 1,
    INT8 = 2,
    INT16 = 3,
    INT32 = 4,
    INT64 = 5,
    UINT8 = 6,
    UINT16 = 7,
    UINT32 = 8,
    UINT64 = 9,
    FLOAT32 = 10,
    FLOAT64 = 11,
    TEXT = 12,
    DATA = 13,
    LIST = 14,
    ENUM = 15,
    STRUCT = 16,
    INTERFACE = 17,
    ANY_POINTER = 18
}
export class Value extends capnp.Struct {
    static readonly VOID = Value_Which.VOID;
    static readonly BOOL = Value_Which.BOOL;
    static readonly INT8 = Value_Which.INT8;
    static readonly INT16 = Value_Which.INT16;
    static readonly INT32 = Value_Which.INT32;
    static readonly INT64 = Value_Which.INT64;
    static readonly UINT8 = Value_Which.UINT8;
    static readonly UINT16 = Value_Which.UINT16;
    static readonly UINT32 = Value_Which.UINT32;
    static readonly UINT64 = Value_Which.UINT64;
    static readonly FLOAT32 = Value_Which.FLOAT32;
    static readonly FLOAT64 = Value_Which.FLOAT64;
    static readonly TEXT = Value_Which.TEXT;
    static readonly DATA = Value_Which.DATA;
    static readonly LIST = Value_Which.LIST;
    static readonly ENUM = Value_Which.ENUM;
    static readonly STRUCT = Value_Which.STRUCT;
    static readonly INTERFACE = Value_Which.INTERFACE;
    static readonly ANY_POINTER = Value_Which.ANY_POINTER;
    static readonly _displayName = "Value";
    static readonly _id = "ce23dcd2d7b00c9b";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(16, 1);
    isVoid(): boolean { return this._getUint16(0) === 0; }
    getBool(): boolean {
        this._testWhich("bool", this._getUint16(0), 1);
        return this._getBit(16);
    }
    isBool(): boolean { return this._getUint16(0) === 1; }
    setBool(value: boolean): void {
        this._setUint16(0, 1);
        this._setBit(16, value);
    }
    getInt8(): number {
        this._testWhich("int8", this._getUint16(0), 2);
        return this._getInt8(2);
    }
    isInt8(): boolean { return this._getUint16(0) === 2; }
    setInt8(value: number): void {
        this._setUint16(0, 2);
        this._setInt8(2, value);
    }
    getInt16(): number {
        this._testWhich("int16", this._getUint16(0), 3);
        return this._getInt16(2);
    }
    isInt16(): boolean { return this._getUint16(0) === 3; }
    setInt16(value: number): void {
        this._setUint16(0, 3);
        this._setInt16(2, value);
    }
    getInt32(): number {
        this._testWhich("int32", this._getUint16(0), 4);
        return this._getInt32(4);
    }
    isInt32(): boolean { return this._getUint16(0) === 4; }
    setInt32(value: number): void {
        this._setUint16(0, 4);
        this._setInt32(4, value);
    }
    getInt64(): capnp.Int64 {
        this._testWhich("int64", this._getUint16(0), 5);
        return this._getInt64(8);
    }
    isInt64(): boolean { return this._getUint16(0) === 5; }
    setInt64(value: capnp.Int64): void {
        this._setUint16(0, 5);
        this._setInt64(8, value);
    }
    getUint8(): number {
        this._testWhich("uint8", this._getUint16(0), 6);
        return this._getUint8(2);
    }
    isUint8(): boolean { return this._getUint16(0) === 6; }
    setUint8(value: number): void {
        this._setUint16(0, 6);
        this._setUint8(2, value);
    }
    getUint16(): number {
        this._testWhich("uint16", this._getUint16(0), 7);
        return this._getUint16(2);
    }
    isUint16(): boolean { return this._getUint16(0) === 7; }
    setUint16(value: number): void {
        this._setUint16(0, 7);
        this._setUint16(2, value);
    }
    getUint32(): number {
        this._testWhich("uint32", this._getUint16(0), 8);
        return this._getUint32(4);
    }
    isUint32(): boolean { return this._getUint16(0) === 8; }
    setUint32(value: number): void {
        this._setUint16(0, 8);
        this._setUint32(4, value);
    }
    getUint64(): capnp.Uint64 {
        this._testWhich("uint64", this._getUint16(0), 9);
        return this._getUint64(8);
    }
    isUint64(): boolean { return this._getUint16(0) === 9; }
    setUint64(value: capnp.Uint64): void {
        this._setUint16(0, 9);
        this._setUint64(8, value);
    }
    getFloat32(): number {
        this._testWhich("float32", this._getUint16(0), 10);
        return this._getFloat32(4);
    }
    isFloat32(): boolean { return this._getUint16(0) === 10; }
    setFloat32(value: number): void {
        this._setUint16(0, 10);
        this._setFloat32(4, value);
    }
    getFloat64(): number {
        this._testWhich("float64", this._getUint16(0), 11);
        return this._getFloat64(8);
    }
    isFloat64(): boolean { return this._getUint16(0) === 11; }
    setFloat64(value: number): void {
        this._setUint16(0, 11);
        this._setFloat64(8, value);
    }
    getText(): string {
        this._testWhich("text", this._getUint16(0), 12);
        return this._getText(0);
    }
    isText(): boolean { return this._getUint16(0) === 12; }
    setText(value: string): void {
        this._setUint16(0, 12);
        this._setText(0, value);
    }
    adoptData(value: capnp.Orphan<capnp.Data>): void {
        this._setUint16(0, 13);
        this._getPointer(0).adopt(value);
    }
    disownData(): capnp.Orphan<capnp.Data> { return this.getData().disown(); }
    getData(): capnp.Data {
        this._testWhich("data", this._getUint16(0), 13);
        return this._getData(0);
    }
    hasData(): boolean { return !this._getPointer(0)._isNull(); }
    initData(length: number): capnp.Data {
        this._setUint16(0, 13);
        return this._initData(0, length);
    }
    isData(): boolean { return this._getUint16(0) === 13; }
    setData(value: capnp.Data): void {
        this._setUint16(0, 13);
        this._getPointer(0)._copyFrom(value);
    }
    adoptList(value: capnp.Orphan<capnp.Pointer>): void {
        this._setUint16(0, 14);
        this._getPointer(0).adopt(value);
    }
    disownList(): capnp.Orphan<capnp.Pointer> { return this.getList().disown(); }
    getList(): capnp.Pointer {
        this._testWhich("list", this._getUint16(0), 14);
        return this._getPointer(0);
    }
    hasList(): boolean { return !this._getPointer(0)._isNull(); }
    isList(): boolean { return this._getUint16(0) === 14; }
    setList(value: capnp.Pointer): void {
        this._setUint16(0, 14);
        this._getPointer(0)._copyFrom(value);
    }
    getEnum(): number {
        this._testWhich("enum", this._getUint16(0), 15);
        return this._getUint16(2);
    }
    isEnum(): boolean { return this._getUint16(0) === 15; }
    setEnum(value: number): void {
        this._setUint16(0, 15);
        this._setUint16(2, value);
    }
    adoptStruct(value: capnp.Orphan<capnp.Pointer>): void {
        this._setUint16(0, 16);
        this._getPointer(0).adopt(value);
    }
    disownStruct(): capnp.Orphan<capnp.Pointer> { return this.getStruct().disown(); }
    getStruct(): capnp.Pointer {
        this._testWhich("struct", this._getUint16(0), 16);
        return this._getPointer(0);
    }
    hasStruct(): boolean { return !this._getPointer(0)._isNull(); }
    isStruct(): boolean { return this._getUint16(0) === 16; }
    setStruct(value: capnp.Pointer): void {
        this._setUint16(0, 16);
        this._getPointer(0)._copyFrom(value);
    }
    isInterface(): boolean { return this._getUint16(0) === 17; }
    adoptAnyPointer(value: capnp.Orphan<capnp.Pointer>): void {
        this._setUint16(0, 18);
        this._getPointer(0).adopt(value);
    }
    disownAnyPointer(): capnp.Orphan<capnp.Pointer> { return this.getAnyPointer().disown(); }
    getAnyPointer(): capnp.Pointer {
        this._testWhich("anyPointer", this._getUint16(0), 18);
        return this._getPointer(0);
    }
    hasAnyPointer(): boolean { return !this._getPointer(0)._isNull(); }
    isAnyPointer(): boolean { return this._getUint16(0) === 18; }
    setAnyPointer(value: capnp.Pointer): void {
        this._setUint16(0, 18);
        this._getPointer(0)._copyFrom(value);
    }
    toString(): string { return "Value_" + super.toString(); }
    which(): Value_Which { return this._getUint16(0); }
}
export class Annotation extends capnp.Struct {
    static readonly _displayName = "Annotation";
    static readonly _id = "f1c8950dab257542";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(8, 2);
    getId(): capnp.Uint64 { return this._getUint64(0); }
    setId(value: capnp.Uint64): void { this._setUint64(0, value); }
    adoptBrand(value: capnp.Orphan<Brand>): void { this._getPointer(1).adopt(value); }
    disownBrand(): capnp.Orphan<Brand> { return this.getBrand().disown(); }
    getBrand(): Brand { return this._getStruct(1, Brand); }
    hasBrand(): boolean { return !this._getPointer(1)._isNull(); }
    initBrand(): Brand { return this._initStructAt(1, Brand); }
    setBrand(value: Brand): void { this._getPointer(1)._copyFrom(value); }
    adoptValue(value: capnp.Orphan<Value>): void { this._getPointer(0).adopt(value); }
    disownValue(): capnp.Orphan<Value> { return this.getValue().disown(); }
    getValue(): Value { return this._getStruct(0, Value); }
    hasValue(): boolean { return !this._getPointer(0)._isNull(); }
    initValue(): Value { return this._initStructAt(0, Value); }
    setValue(value: Value): void { this._getPointer(0)._copyFrom(value); }
    toString(): string { return "Annotation_" + super.toString(); }
}
export enum ElementSize {
    EMPTY,
    BIT,
    BYTE,
    TWO_BYTES,
    FOUR_BYTES,
    EIGHT_BYTES,
    POINTER,
    INLINE_COMPOSITE
}
export class CapnpVersion extends capnp.Struct {
    static readonly _displayName = "CapnpVersion";
    static readonly _id = "d85d305b7d839963";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(8, 0);
    getMajor(): number { return this._getUint16(0); }
    setMajor(value: number): void { this._setUint16(0, value); }
    getMinor(): number { return this._getUint8(2); }
    setMinor(value: number): void { this._setUint8(2, value); }
    getMicro(): number { return this._getUint8(3); }
    setMicro(value: number): void { this._setUint8(3, value); }
    toString(): string { return "CapnpVersion_" + super.toString(); }
}
export class CodeGeneratorRequest_RequestedFile_Import extends capnp.Struct {
    static readonly _displayName = "Import";
    static readonly _id = "ae504193122357e5";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(8, 1);
    getId(): capnp.Uint64 { return this._getUint64(0); }
    setId(value: capnp.Uint64): void { this._setUint64(0, value); }
    getName(): string { return this._getText(0); }
    setName(value: string): void { this._setText(0, value); }
    toString(): string { return "CodeGeneratorRequest_RequestedFile_Import_" + super.toString(); }
}
export class CodeGeneratorRequest_RequestedFile extends capnp.Struct {
    static readonly Import = CodeGeneratorRequest_RequestedFile_Import;
    static readonly _displayName = "RequestedFile";
    static readonly _id = "cfea0eb02e810062";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(8, 2);
    static _Imports: capnp.ListCtor<CodeGeneratorRequest_RequestedFile_Import>;
    getId(): capnp.Uint64 { return this._getUint64(0); }
    setId(value: capnp.Uint64): void { this._setUint64(0, value); }
    getFilename(): string { return this._getText(0); }
    setFilename(value: string): void { this._setText(0, value); }
    adoptImports(value: capnp.Orphan<capnp.List<CodeGeneratorRequest_RequestedFile_Import>>): void { this._getPointer(1).adopt(value); }
    disownImports(): capnp.Orphan<capnp.List<CodeGeneratorRequest_RequestedFile_Import>> { return this.getImports().disown(); }
    getImports(): capnp.List<CodeGeneratorRequest_RequestedFile_Import> { return this._getList(1, CodeGeneratorRequest_RequestedFile._Imports); }
    hasImports(): boolean { return !this._getPointer(1)._isNull(); }
    initImports(length: number): capnp.List<CodeGeneratorRequest_RequestedFile_Import> { return this._initList(1, CodeGeneratorRequest_RequestedFile._Imports, length); }
    setImports(value: capnp.List<CodeGeneratorRequest_RequestedFile_Import>): void { this._getPointer(1)._copyFrom(value); }
    toString(): string { return "CodeGeneratorRequest_RequestedFile_" + super.toString(); }
}
export class CodeGeneratorRequest extends capnp.Struct {
    static readonly RequestedFile = CodeGeneratorRequest_RequestedFile;
    static readonly _displayName = "CodeGeneratorRequest";
    static readonly _id = "bfc546f6210ad7ce";
    static readonly _size: capnp.ObjectSize = new capnp.ObjectSize(0, 3);
    static _Nodes: capnp.ListCtor<Node>;
    static _RequestedFiles: capnp.ListCtor<CodeGeneratorRequest_RequestedFile>;
    adoptCapnpVersion(value: capnp.Orphan<CapnpVersion>): void { this._getPointer(2).adopt(value); }
    disownCapnpVersion(): capnp.Orphan<CapnpVersion> { return this.getCapnpVersion().disown(); }
    getCapnpVersion(): CapnpVersion { return this._getStruct(2, CapnpVersion); }
    hasCapnpVersion(): boolean { return !this._getPointer(2)._isNull(); }
    initCapnpVersion(): CapnpVersion { return this._initStructAt(2, CapnpVersion); }
    setCapnpVersion(value: CapnpVersion): void { this._getPointer(2)._copyFrom(value); }
    adoptNodes(value: capnp.Orphan<capnp.List<Node>>): void { this._getPointer(0).adopt(value); }
    disownNodes(): capnp.Orphan<capnp.List<Node>> { return this.getNodes().disown(); }
    getNodes(): capnp.List<Node> { return this._getList(0, CodeGeneratorRequest._Nodes); }
    hasNodes(): boolean { return !this._getPointer(0)._isNull(); }
    initNodes(length: number): capnp.List<Node> { return this._initList(0, CodeGeneratorRequest._Nodes, length); }
    setNodes(value: capnp.List<Node>): void { this._getPointer(0)._copyFrom(value); }
    adoptRequestedFiles(value: capnp.Orphan<capnp.List<CodeGeneratorRequest_RequestedFile>>): void { this._getPointer(1).adopt(value); }
    disownRequestedFiles(): capnp.Orphan<capnp.List<CodeGeneratorRequest_RequestedFile>> { return this.getRequestedFiles().disown(); }
    getRequestedFiles(): capnp.List<CodeGeneratorRequest_RequestedFile> { return this._getList(1, CodeGeneratorRequest._RequestedFiles); }
    hasRequestedFiles(): boolean { return !this._getPointer(1)._isNull(); }
    initRequestedFiles(length: number): capnp.List<CodeGeneratorRequest_RequestedFile> { return this._initList(1, CodeGeneratorRequest._RequestedFiles, length); }
    setRequestedFiles(value: capnp.List<CodeGeneratorRequest_RequestedFile>): void { this._getPointer(1)._copyFrom(value); }
    toString(): string { return "CodeGeneratorRequest_" + super.toString(); }
}
Node_Struct._Fields = capnp.CompositeList(Field);
Node_Interface._Methods = capnp.CompositeList(Method);
Node_Interface._Superclasses = capnp.CompositeList(Superclass);
Node_Enum._Enumerants = capnp.CompositeList(Enumerant);
Node._Parameters = capnp.CompositeList(Node_Parameter);
Node._NestedNodes = capnp.CompositeList(Node_NestedNode);
Node._Annotations = capnp.CompositeList(Annotation);
Field._Annotations = capnp.CompositeList(Annotation);
Enumerant._Annotations = capnp.CompositeList(Annotation);
Method._ImplicitParameters = capnp.CompositeList(Node_Parameter);
Method._Annotations = capnp.CompositeList(Annotation);
Brand_Scope._Bind = capnp.CompositeList(Brand_Binding);
Brand._Scopes = capnp.CompositeList(Brand_Scope);
CodeGeneratorRequest_RequestedFile._Imports = capnp.CompositeList(CodeGeneratorRequest_RequestedFile_Import);
CodeGeneratorRequest._Nodes = capnp.CompositeList(Node);
CodeGeneratorRequest._RequestedFiles = capnp.CompositeList(CodeGeneratorRequest_RequestedFile);
